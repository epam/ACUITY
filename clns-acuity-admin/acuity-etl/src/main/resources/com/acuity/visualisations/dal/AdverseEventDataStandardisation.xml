<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  ~ Copyright 2021 The University of Manchester
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">

<properties>
    <comment>Set of ETL postprocess scripts created for RCT-4212</comment>

    <!--RCT-4212-->
    <entry key="AES_UPDATE_ONGOINGS"><![CDATA[

with sourceTable as (
    SELECT DISTINCT
      aes_id,wc_withdrawal_completion_date,dth_date, vis_date,
      case
        when
        --if AE end date later than the earliest date from death date and current date-time,
            aes_end_date_raw is not null
            and least(coalesce(dth_date, oracle.sysdate()), oracle.sysdate()) < aes_end_date_raw
        --ETL should save the earliest date from death date and current date-time as AE end date to the DB
            then least(coalesce(dth_date, oracle.sysdate()), oracle.sysdate())
        when
        --if AE doesn't have an end date, withdrawal/completion date is not null and AE was started after withdrawal/completion date,
        --and last visit date after ae start date
        --DECODE(SIGN(aes_start_date - coalesce(vis_date, aes_start_date)), 1, oracle.sysdate(), coalesce(vis_date, oracle.sysdate()) means use vis_date if vis_date >= aes_start_date or use current date otherwise
            aes_end_date_raw is null
            and wc_withdrawal_completion_date is not null
            and aes_start_date > wc_withdrawal_completion_date
        --ETL should save the earliest date from death date, last visit date and current date-time as AE end date to the DB
            then coalesce(dth_date, least(DECODE(SIGN(extract(day FROM(aes_start_date - coalesce(vis_date, aes_start_date))))::integer, 1, oracle.sysdate(), coalesce(vis_date, oracle.sysdate())), oracle.sysdate()))
        when
        --if AE doesn't have an end date and there is no withdrawal/completion date, but death date is present
            aes_end_date_raw is null
            and wc_withdrawal_completion_date is null
            and dth_date is not null
        --ETL should save the death date
            then dth_date
        when
        --if AE doesn't have an end date and there is no withdrawal/completion date and death date, and last visit is after ae start date
        --DECODE(SIGN(aes_start_date - coalesce(vis_date, aes_start_date)), 1, oracle.sysdate(), coalesce(vis_date, oracle.sysdate()) means use vis_date if vis_date >= aes_start_date or use current date otherwise
            aes_end_date_raw is null
            and wc_withdrawal_completion_date is null
            and dth_date is null
        --ETL should save the earliest date from last visit date and current date-time as AE end date to the DB
            then least(DECODE(SIGN (extract(day FROM(aes_start_date - coalesce(vis_date, aes_start_date))))::integer, 1, oracle.sysdate(), coalesce(vis_date, oracle.sysdate())), oracle.sysdate())
        when
        --if AE doesn't have an end date, withdrawal/completion date is not null and AE was started before withdrawal/completion date,
            aes_end_date_raw is null
            and wc_withdrawal_completion_date is not null
            and aes_start_date <= wc_withdrawal_completion_date
        --ETL should save the first not null date (COALESCE) from death date, max(withdrawal/completion date and last visit date) and current date-time
            then coalesce(dth_date, greatest(wc_withdrawal_completion_date, coalesce(vis_date, wc_withdrawal_completion_date)), oracle.sysdate())
        else
          aes_end_date
        end
        AS aes_end_date,
      CASE WHEN dth_date is null
      and (wc_withdrawal_completion_date is null or aes_start_date > wc_withdrawal_completion_date)
      and (vis_date is null or vis_date < aes_start_date)
      and (
          aes_end_date_raw is null
          or (
            aes_end_date_raw is not null
            and aes_end_date_raw > oracle.sysdate()
          )
      )
      THEN '1' ELSE '0' END
      AS ongoing,
      CASE
      WHEN dth_date is not null and (
          aes_end_date_raw is null
          or (
            aes_end_date_raw is not null
            and aes_end_date_raw > oracle.sysdate()
          )
          or (
            aes_end_date_raw is not null
            and aes_end_date_raw > dth_date
          )
      )
      then 'DEATH'
      WHEN (wc_withdrawal_completion_date is not null
      and dth_date is null
      and (vis_date is null or wc_withdrawal_completion_date > vis_date))
      and (
        aes_end_date_raw is null and aes_start_date <= wc_withdrawal_completion_date
      )
      then 'WITHDRAWAL'
      WHEN dth_date is null
      and aes_end_date_raw is null
      and vis_date is not null
      and vis_date >= aes_start_date
      and (
        wc_withdrawal_completion_date is null
        or (vis_date > wc_withdrawal_completion_date)
        )
      then 'LAST_VISIT'
      else
      'NONE'
      end
      as end_type
    FROM result_ae_severity
    JOIN result_ae ON ae_id=aes_ae_id
    JOIN result_patient ON pat_id=ae_pat_id
    LEFT JOIN result_death ON dth_pat_id=pat_id
    LEFT JOIN result_withdrawal_completion ON wc_pat_id=pat_id
    LEFT JOIN (SELECT rv.VIS_PAT_ID, rv.VIS_DATE from RESULT_VISIT rv INNER JOIN ( SELECT VIS_PAT_ID, max(VIS_DATE) as vn from RESULT_VISIT GROUP BY VIS_PAT_ID) groupby_rv
      on rv.VIS_PAT_ID = groupby_rv.VIS_PAT_ID and rv.VIS_DATE = groupby_rv.vn) as XX on VIS_PAT_ID = PAT_ID
    WHERE pat_std_id = ?
)

UPDATE result_ae_severity
set aes_end_date = sourceTable.aes_end_date,
aes_ongoing=sourceTable.ongoing,
aes_end_type = sourceTable.end_type
FROM sourceTable
WHERE sourceTable.aes_id = result_ae_severity.aes_id
]]></entry>

    <!--RCT-4577-->
    <entry key="AES_DISCARD_INVALID_1"><![CDATA[
DELETE
FROM RESULT_AE_SEVERITY
WHERE (AES_START_DATE > AES_END_DATE
OR AES_START_DATE     > oracle.sysdate())
AND (SELECT pat_std_id
  FROM result_patient
  INNER JOIN result_ae
  ON ae_pat_id = pat_id
  WHERE ae_id  = aes_ae_id) = ?
    ]]></entry>
    <entry key="AES_DISCARD_INVALID_2"><![CDATA[
DELETE
FROM RESULT_AE
WHERE (SELECT pat_std_id FROM result_patient WHERE ae_pat_id = pat_id) = ?
AND NOT EXISTS
  (SELECT 1 FROM RESULT_AE_SEVERITY WHERE AES_AE_ID = AE_ID)
    ]]></entry>

    <!--UPDATE result_ae_severity SET aes_ongoing='1', aes_sec_hash=0 WHERE aes_date_updated=aes_end_date;-->

</properties>
