/*
 * Copyright 2021 The University of Manchester
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {VAPermissionEvalutator, VAPermissions} from './VAPermissionEvalutator';
import {VACumulativePermissions} from './VAPermissionEvalutator';

describe('VAPermissionEvalutator class', () => {
    const aclsWithDevelopmentTeamPermission: Request.AcuityObjectIdentityWithPermission[] = [
        {
            autoGeneratedId: true,
            id: 12,
            identifier: 12,
            name: 'vis 1',
            origin: 'DETECT',
            rolePermissionMask: VACumulativePermissions.DEVELOPMENT_TEAM,
            viewPermissionMask: 3,
            supertype: 'string',
            canView: true,
            type: 'string',
            shortNameByType: 'test'
        }
    ];
    const aclsWithoutDevelopmentTeamPermission: Request.AcuityObjectIdentityWithPermission[] = [
        {
            autoGeneratedId: true,
            id: 12,
            identifier: 12,
            name: 'vis 1',
            origin: 'DETECT',
            rolePermissionMask: VACumulativePermissions.AUTHORISED_USER,
            viewPermissionMask: 7,
            supertype: 'string',
            canView: true,
            type: 'string',
            shortNameByType: 'test'
        }
    ];

    console.log(aclsWithDevelopmentTeamPermission);
    it('THEN it should check for dev team permission', () => {
        const hasPermission = VAPermissionEvalutator.hasDevelopmentTeamPermission(aclsWithDevelopmentTeamPermission);

        expect(hasPermission).toBe(true);
    });

    it('THEN it should check for not having dev team permission', () => {
        const hasPermission = VAPermissionEvalutator.hasDevelopmentTeamPermission(aclsWithoutDevelopmentTeamPermission);

        expect(hasPermission).toBe(false);
    });

    it('THEN it should check for dev team permission', () => {
        const hasPermission = VAPermissionEvalutator.hasPermission(aclsWithDevelopmentTeamPermission,
            VACumulativePermissions.DEVELOPMENT_TEAM);

        expect(hasPermission).toBe(true);
    });

    it('THEN it should check for not having for dev team permission', () => {
        const hasPermission = VAPermissionEvalutator.hasPermission(aclsWithDevelopmentTeamPermission,
            VACumulativePermissions.ADMINISTRATOR);

        expect(hasPermission).toBe(false);
    });

    it('THEN it should check for not having for oncology view permission', () => {
        const hasPermission = VAPermissionEvalutator.checkViewPermission(aclsWithDevelopmentTeamPermission,
            VAPermissions.VIEW_ONCOLOGY_PACKAGE);

        expect(hasPermission).toBe(false);
    });
});
