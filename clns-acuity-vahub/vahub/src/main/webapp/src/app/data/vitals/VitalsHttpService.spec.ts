/*
 * Copyright 2021 The University of Manchester
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {HttpClient} from '@angular/common/http';
import {HttpClientTestingModule} from '@angular/common/http/testing';
import {async, inject, TestBed} from '@angular/core/testing';
import {FilterEventService, FilterHttpService, PopulationFiltersModel, VitalsFiltersModel} from '../../filters/module';
import {Observable} from 'rxjs/Observable';
import * as utils from '../../common/utils/Utils';
import {MockFilterModel, MockHttpClient} from '../../common/MockClasses';
import {VitalsBoxPlotHttpService} from './VitalsBoxPlotHttpService';
import {fromJS} from 'immutable';
import AcuityObjectIdentityWithPermission = Request.AcuityObjectIdentityWithPermission;
import Dataset = Request.Dataset;


describe('GIVEN VitalsHttpService', () => {

    const mockStudy = [{
        id: 1,
        type: 'DetectDataset',
        canView: true,
        rolePermissionMask: 3,
        viewPermissionMask: 3,
        autoGeneratedId: true,
        name: '',
        shortNameByType: '',
        supertype: ''
    }];

    beforeEach(() => {
        TestBed.configureTestingModule({
            imports: [HttpClientTestingModule],
            providers: [
                {provide: HttpClient, useClass: MockHttpClient},
                FilterEventService,
                FilterHttpService,
                HttpClient,
                {provide: PopulationFiltersModel, useClass: MockFilterModel},
                {provide: VitalsFiltersModel, useClass: MockFilterModel},
                {
                    provide: VitalsBoxPlotHttpService,
                    useClass: VitalsBoxPlotHttpService,
                    deps: [HttpClient, VitalsFiltersModel, VitalsFiltersModel]
                },
            ]
        });
    });

    describe('WHEN we get trellis options', () => {

        it('THEN the data is returned', async(inject([HttpClient, VitalsBoxPlotHttpService], (httpClient, httpService) => {
            const mockResponse = {
                dod: [{
                    trellisedBy: 'MEASUREMENT',
                    category: 'MANDATORY_TRELLIS',
                    trellisOptions: ['TEMPERATURE', 'DIASTOLIC BLOOD PRESSURE']
                }, {
                    trellisedBy: 'ARM',
                    category: 'NON_MANDATORY_TRELLIS',
                    trellisOptions: ['Placebo', 'SuperDex 10 mg', 'SuperDex 20 mg']
                }]
            };
            const yAxisOption = new Map();
            yAxisOption.set('groupByOption', 'yAxisOption');

            spyOn(httpClient, 'post').and.returnValue(Observable.of(mockResponse));

            httpService.getTrellisOptions(mockStudy, yAxisOption).subscribe((res) => {
                expect(res).toEqual(mockResponse);
            });
        })));
    });

    describe('WHEN we get details on demand data', () => {

        it('THEN the data is returned', async(inject([HttpClient, VitalsBoxPlotHttpService],
            (httpClient, httpService: VitalsBoxPlotHttpService) => {
                const eventIds = ['1', '2'];
                const mockResponse = {
                    dodData: [{
                        subjectId: 'Subj-1',
                        measurementName: 'PULSE OXIMETRY',
                        measurementTimePoint: new Date().toDateString(),
                        daysOnStudy: '29',
                        analysisVisit: '5',
                        visitNumber: 1,
                        resultValue: '96.0',
                        resultUnit: '%',
                        baselineValue: '95',
                        changeFromBaseline: '1',
                        percentChangeFromBaseline: '1.05',
                        baselineFlag: null
                    }]
                };
                spyOn(httpClient, 'post').and.returnValue(Observable.of(mockResponse));

                httpService.getDetailsOnDemand(mockStudy as Dataset[], eventIds, 0, 10, fromJS({
                    sortBy: 'subjectId',
                    reversed: false
                })).subscribe((res) => {
                    expect(res).toEqual(mockResponse.dodData);
                });
            })));
    });

    describe('WHEN we download all the details on demand data', () => {

        it('THEN the data is returned', async(inject([HttpClient, VitalsBoxPlotHttpService],
            (httpClient, httpService: VitalsBoxPlotHttpService) => {
                spyOn(utils, 'downloadData');
                const mockResponse: any[] = [{
                    subjectId: 'Subj-1',
                    measurementName: 'PULSE OXIMETRY',
                    measurementTimePoint: new Date().toDateString(),
                    daysOnStudy: '29',
                    analysisVisit: '5',
                    visitNumber: '1',
                    resultValue: '96.0',
                    resultUnit: '%',
                    baselineValue: '95',
                    changeFromBaseline: '1',
                    percentChangeFromBaseline: '1.05',
                    baselineFlag: null
                }];

                spyOn(httpClient, 'post').and.returnValue(Observable.of(mockResponse));

                httpService.downloadAllDetailsOnDemandData(mockStudy as Dataset[]);

                expect(utils.downloadData).toHaveBeenCalled();
            })));
    });
});
