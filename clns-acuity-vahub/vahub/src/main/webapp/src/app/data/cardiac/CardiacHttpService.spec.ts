/*
 * Copyright 2021 The University of Manchester
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {async, inject, TestBed} from '@angular/core/testing';
import {HttpClient} from '@angular/common/http';
import {CardiacHttpService} from './CardiacHttpService';
import {CardiacFiltersModel, PopulationFiltersModel} from '../../filters/module';
import * as utils from '../../common/utils/Utils';
import {MockFilterModel, MockHttpClient} from '../../common/MockClasses';
import {HttpClientTestingModule} from '@angular/common/http/testing';
import {Observable} from 'rxjs/Observable';
import Dataset = Request.Dataset;
import DetailsOnDemandResponse = Request.DetailsOnDemandResponse;

describe('GIVEN CardiacHttpService', () => {

    const mockStudy: any = [{
        id: 1,
        type: 'DetectDataset',
        canView: true,
        rolePermissionMask: 3,
        viewPermissionMask: 3,
        autoGeneratedId: true,
        name: '',
        shortNameByType: '',
        supertype: '',
        typeForJackson: ''
    }];

    beforeEach(() => {
        TestBed.configureTestingModule({
            imports: [HttpClientTestingModule],
            providers: [
                {provide: HttpClient, useClass: MockHttpClient},
                {provide: PopulationFiltersModel, useClass: MockFilterModel},
                {provide: CardiacFiltersModel, useClass: MockFilterModel},
                {provide: CardiacHttpService, useClass: CardiacHttpService,
                    deps: [HttpClient, PopulationFiltersModel, CardiacFiltersModel]},
            ]
        });
    });

    describe('WHEN we get details on demand data', () => {

        it('THEN the data is returned', async(inject([HttpClient, CardiacHttpService], (httpClient, httpService: CardiacHttpService) => {
            const eventIds = ['1', '2'];
            const mockResponse: DetailsOnDemandResponse = {dodData: [{
                subjectId: 'SUBJECT0001', studyId: 'STUDYID001', studyPart: 'B', measurementName: 'Summary (Mean) QT Duration',
                measurementCategory: 'ECG', measurementTimePoint: '03-MAR-11', daysOnStudy: '111', analysisVisit: '15', visitNumber: '14',
                resultValue: '390', resultUnit: '', baselineValue: '390', changeFromBaseline: '0', percentChangeFromBaseline: '0',
                baselineFlag: 'Yes', clinicallySignificant: ''
            }]};

            spyOn(httpClient, 'post').and.returnValue(Observable.of(mockResponse));

            httpService.getDetailsOnDemand(
                <Dataset[]> mockStudy,
                eventIds, 0, 10, [{
                    sortBy: 'subjectId',
                    reversed: false
                }])
                .subscribe((res) => {
                    expect(res).toEqual(mockResponse.dodData);
                });
        })));
    });

    describe('WHEN we download all the details on demand data', () => {

        it('THEN the data is returned', async(inject([HttpClient, CardiacHttpService], (httpClient, httpService: CardiacHttpService) => {
            spyOn(utils, 'downloadData');
            const mockResponse: DetailsOnDemandResponse = {dodData: [{
                subjectId: 'SUBJECT0001', studyId: 'STUDYID001', studyPart: 'B', measurementName: 'Summary (Mean) QT Duration',
                measurementCategory: 'ECG', measurementTimePoint: '03-MAR-11', daysOnStudy: '111', analysisVisit: '15', visitNumber: '14',
                resultValue: '390', resultUnit: '', baselineValue: '390', changeFromBaseline: '0', percentChangeFromBaseline: '0',
                baselineFlag: 'Yes', clinicallySignificant: ''
            }]};

            spyOn(httpClient, 'post').and.returnValue(Observable.of(mockResponse));

            httpService.downloadAllDetailsOnDemandData(<Dataset[]> mockStudy);

            expect(utils.downloadData).toHaveBeenCalled();
        })));
    });
});
