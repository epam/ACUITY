/*
 * Copyright 2021 The University of Manchester
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {HttpClient} from '@angular/common/http';
import {HttpClientTestingModule} from '@angular/common/http/testing';
import {async, inject, TestBed} from '@angular/core/testing';
import {Observable} from 'rxjs/Observable';
import {RespiratoryHttpService} from './RespiratoryHttpService';
import {ExacerbationsFiltersModel, LungFunctionFiltersModel, PopulationFiltersModel} from '../../filters/module';

import * as utils from '../../common/utils/Utils';
import {MockFilterModel, MockHttpClient} from '../../common/MockClasses';
import {PlotType} from '../../common/trellising/store';
import {RespiratoryBoxPlotHttpService} from './RespiratoryBoxPlotHttpService';
import {Map} from 'immutable';


describe('GIVEN RespiratoryHttpService', () => {

    const mockStudy = [{
        id: 1,
        type: 'DetectDataset',
        canView: true,
        rolePermissionMask: 3,
        viewPermissionMask: 3,
        autoGeneratedId: true,
        name: '',
        shortNameByType: '',
        supertype: ''
    }];

    beforeEach(() => {
        TestBed.configureTestingModule({
            imports: [HttpClientTestingModule],
            providers: [
                {provide: HttpClient, useClass: MockHttpClient},
                {provide: PopulationFiltersModel, useClass: MockFilterModel},
                {provide: LungFunctionFiltersModel, useClass: MockFilterModel},
                {provide: ExacerbationsFiltersModel, useClass: MockFilterModel},
                {
                    provide: RespiratoryBoxPlotHttpService, useClass: RespiratoryBoxPlotHttpService, deps: [
                        HttpClient, PopulationFiltersModel, LungFunctionFiltersModel, ExacerbationsFiltersModel]
                },
                {
                    provide: RespiratoryHttpService, useClass: RespiratoryHttpService, deps: [
                        HttpClient, PopulationFiltersModel, LungFunctionFiltersModel, ExacerbationsFiltersModel]
                }
            ]
        });
    });

    describe('WHEN we get Box Plot data', () => {

        it('THEN the data is returned', async(inject([HttpClient, RespiratoryBoxPlotHttpService], (httpClient, httpService) => {
            const mockResponse = [{
                trellisedBy: [{
                    trellisedBy: 'MEASUREMENT',
                    category: 'MANDATORY_TRELLIS',
                    trellisOption: 'Forced Expiratory Volume in 1 second (L)'
                }, {
                    trellisedBy: 'ARM',
                    category: 'NON_MANDATORY_TRELLIS',
                    trellisOption: 'Placebo'
                }],
                stats: [{
                    x: 3.0,
                    median: -0.0113,
                    upperQuartile: 0.03,
                    lowerQuartile: -0.0678,
                    upperWhisker: 0.16,
                    lowerWhisker: -0.2,
                    subjectCount: 41,
                    outliers: []
                }]
            }];
            const trellising = [
                {
                    category: 'MANDATORY_TRELLIS',
                    trellisedBy: 'MEASUREMENT',
                    trellisOptions: ['PH-HYPO', 'CREATININE (MG/DL)']
                },
                {
                    category: 'NON_MANDATORY_TRELLIS',
                    trellisedBy: 'ARM',
                    trellisOptions: ['Placebo', 'SuperDex 10 mg', 'SuperDex 20 mg']
                }
            ];

            spyOn(httpClient, 'post').and.returnValue(Observable.of(mockResponse));

            httpService.getPlotData(mockStudy, 'VISIT_NUM', 'ACTUAL_VALUE', trellising).subscribe((res) => {
                const expectedResponse = {
                    plotType: PlotType.BOXPLOT,
                    trellising: mockResponse[0].trellisedBy,
                    data: mockResponse[0].stats
                };
                expect(res.toJS()[0]).toEqual(expectedResponse);
            });
        })));
    });

    describe('WHEN we get trellis options', () => {

        it('THEN the data is returned', async(inject([HttpClient, RespiratoryBoxPlotHttpService], (httpClient, httpService) => {
            const mockResponse = [{
                trellisedBy: 'MEASUREMENT',
                category: 'MANDATORY_TRELLIS',
                trellisOptions: []
            }, {
                trellisedBy: 'ARM',
                category: 'NON_MANDATORY_TRELLIS',
                trellisOptions: ['Placebo', 'SuperDex 10 mg', 'SuperDex 20 mg']
            }];

            spyOn(httpClient, 'post').and.returnValue(Observable.of(mockResponse));

            const yAxisOption = Map().set('groupByOption', 'yAxisOption');
            httpService.getTrellisOptions(mockStudy, yAxisOption).subscribe((res) => {
                expect(res).toEqual(mockResponse);
            });
        })));
    });

    describe('WHEN we download all the Lung Function details on demand data', () => {

        it('THEN the data is returned', async(inject([HttpClient, RespiratoryBoxPlotHttpService],
            (httpClient, httpService: RespiratoryBoxPlotHttpService) => {
                spyOn(utils, 'downloadData');
                const mockResponse = [{
                    subjectId: 'SUBJECT0001'
                }];

                spyOn(httpClient, 'post').and.returnValue(Observable.of(mockResponse));

                httpService.downloadAllDetailsOnDemandData(<Request.AcuityObjectIdentityWithPermission[]>mockStudy);

                expect(utils.downloadData).toHaveBeenCalled();
            })));
    });

    describe('WHEN we download all the Exacerbations details on demand data', () => {

        it('THEN the data is returned', async(inject([HttpClient, RespiratoryBoxPlotHttpService],
            (httpClient, httpService: RespiratoryBoxPlotHttpService) => {
                spyOn(utils, 'downloadData');
                const mockResponse = [{
                    subjectId: 'SUBJECT0001'
                }];

                spyOn(httpClient, 'post').and.returnValue(Observable.of(mockResponse));

                httpService.downloadAllDetailsOnDemandData(<Request.AcuityObjectIdentityWithPermission[]>mockStudy);

                expect(utils.downloadData).toHaveBeenCalled();
            })));
    });
});
